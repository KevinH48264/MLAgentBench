We're currently solving the following issue within our repository. Here's the issue text:
         ISSUE:
         3.0: DateTime fields cannot be used as inner field for List or Tuple fields
         Between releases 3.0.0rc8 and 3.0.0rc9, `DateTime` fields have started throwing an error when being instantiated as inner fields of container fields like `List` or      
         `Tuple`. The snippet below works in <=3.0.0rc8 and throws the error below in >=3.0.0rc9 (and, worryingly, 3.0.0):

         ```python
         from marshmallow import fields, Schema

         class MySchema(Schema):
             times = fields.List(fields.DateTime())

         s = MySchema()
         ```

         Traceback:
         ```
         Traceback (most recent call last):
           File "test-mm.py", line 8, in <module>
             s = MySchema()
           File "/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/schema.py", line 383, in __init__
             self.fields = self._init_fields()
           File "/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/schema.py", line 913, in _init_fields
             self._bind_field(field_name, field_obj)
           File "/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/schema.py", line 969, in _bind_field
             field_obj._bind_to_schema(field_name, self)
           File "/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/fields.py", line 636, in _bind_to_schema
             self.inner._bind_to_schema(field_name, self)
           File "/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/fields.py", line 1117, in _bind_to_schema
             or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
         AttributeError: 'List' object has no attribute 'opts'
         ```

         It seems like it's treating the parent field as a Schema without checking that it is indeed a schema, so the `schema.opts` statement fails as fields don't have an `opts`
         attribute.

         Issue comments:
         Thanks for reporting. I don't think I'll have time to look into this until the weekend. Would you like to send a PR?
         I'm afraid I don't have any time either, and I don't really have enough context on the `_bind_to_schema` process to make sure I'm not breaking stuff.
         OK, no problem. @lafrech Will you have a chance to look into this?
         I've found the patch below to fix the minimal example above, but I'm not really sure what it's missing out on or how to test it properly:
         ```patch
         diff --git a/src/marshmallow/fields.py b/src/marshmallow/fields.py
         index 0b18e7d..700732e 100644
         --- a/src/marshmallow/fields.py
         +++ b/src/marshmallow/fields.py
         @@ -1114,7 +1114,7 @@ class DateTime(Field):
                  super()._bind_to_schema(field_name, schema)
                  self.format = (
                      self.format
         -            or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
         +            or getattr(getattr(schema, "opts", None), self.SCHEMA_OPTS_VAR_NAME, None)
                      or self.DEFAULT_FORMAT
                  )
         ```
             git difftool 3.0.0rc8 3.0.0rc9 src/marshmallow/fields.py

         When reworking container stuff, I changed

         ```py
                 self.inner.parent = self
                 self.inner.name = field_name
         ```
         into

         ```py
                 self.inner._bind_to_schema(field_name, self)
         ```

         AFAIR, I did this merely to avoid duplication. On second thought, I think it was the right thing to do, not only for duplication but to actually bind inner fields to the
         `Schema`.

         Reverting this avoids the error but the inner field's `_bind_to_schema` method is not called so I'm not sure it is desirable.

         I think we really mean to call that method, not only in this case but also generally.

         Changing

         ```py
                     or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
         ```

         into

         ```py
                     or getattr(self.root.opts, self.SCHEMA_OPTS_VAR_NAME)
         ```

         might be a better fix. Can anyone confirm (@sloria, @deckar01)?

         The fix in https://github.com/marshmallow-code/marshmallow/issues/1357#issuecomment-523465528 removes the error but also the feature: `DateTime` fields buried into      
         container fields won't respect the format set in the `Schema`.

         I didn't double-check that but AFAIU, the change I mentioned above (in container stuff rework) was the right thing to do. The feature was already broken (format set in  
         `Schema` not respected if `DateTime` field in container field) and that's just one of the issues that may arise due to the inner field not being bound to the `Schema`.  
         But I may be wrong.
         On quick glance, your analysis and fix look correct @lafrech
         Let's do that, then.

         Not much time either. The first who gets the time can do it.

         For the non-reg tests :

         1/ a test that checks the format set in the schema is respected if the `DateTime` field is in a container field

         2/ a set of tests asserting the `_bind_to_schema` method of inner fields `List`, `Dict`, `Tuple` is called from container fields (we can use `DateTime` with the same    
         test case for that)

         Perhaps 1/ is useless if 2/ is done.
         Test case diff that will be applied and test after your changes:
         diff --git a/tests/test_fields.py b/tests/test_fields.py
         --- a/tests/test_fields.py
         +++ b/tests/test_fields.py
         @@ -169,6 +169,20 @@ class OtherSchema(MySchema):
                  assert schema2.fields["foo"].key_field.root == schema2
                  assert schema2.fields["foo"].value_field.root == schema2

         +    # Regression test for https://github.com/marshmallow-code/marshmallow/issues/1357
         +    def test_datetime_list_inner_format(self, schema):
         +        class MySchema(Schema):
         +            foo = fields.List(fields.DateTime())
         +            bar = fields.Tuple((fields.DateTime(),))
         +
         +            class Meta:
         +                datetimeformat = "iso8601"
         +                dateformat = "iso8601"
         +
         +        schema = MySchema()
         +        assert schema.fields["foo"].inner.format == "iso8601"
         +        assert schema.fields["bar"].tuple_fields[0].format == "iso8601"
         +

          class TestMetadata:
              @pytest.mark.parametrize("FieldClass", ALL_FIELDS)


         INSTRUCTIONS:
         Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the 
         special interface to help you. Edit all the files you need to and run any checks or tests that you want.
         Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.
         When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.
         Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a   
         python script and then run it with `python <script_name>.py`.

         NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!

         IMPORTANT TIPS:
         1. Always start by trying to replicate the bug that the issues discusses.
            If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.   
            Then start trying to fix it.
            When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.

            If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print("Script completed successfully, no errors.") command at  
         the end of the file,
            so that you can be sure that the script indeed ran fine all the way through.

         2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!       

         3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple
         times. Instead, use the goto 583 command. It's much quicker.

         4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a    
         search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file "buggy-input.png" If that doensn't work,  
         use the linux 'find' command.

         5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file    
         might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.        

         6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit 
         to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.


         (Open file: n/a)
         (Current directory: /marshmallow-code__marshmallow)
         bash-$